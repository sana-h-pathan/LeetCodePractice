class Solution {
    int[] network;
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n=graph.length;
        this.network=new int[n];
        Arrays.fill(network, -1);
        int clr=0;
        for(int i=0;i<n;i++){
            if(network[i]==-1){
                dfs(graph,clr,i);
                clr++;
            }
        }
        int[] group=new int[clr];
        for(int num: network){
            group[num]++;
        }
        int[] initGrp=new int[clr];
        int minNode=Integer.MAX_VALUE;
        for(int init: initial){
            int color=network[init];
            initGrp[color]++;
            minNode=Math.min(minNode,init);
        }
        int result=Integer.MAX_VALUE;
        for(int bad: initial){
            int color = network[bad];
            int badNodes = initGrp[color];
            if(badNodes==1){
                if(result==Integer.MAX_VALUE)
                    result=bad;
                else if(group[color]>group[network[result]])
                    result=bad;
                else if(group[color]==group[network[result]] && bad< result)
                    result=bad;
            }
        }
        if(result==Integer.MAX_VALUE){
            result=minNode;
        }
        return result;
    }

    private void dfs(int[][] graph, int c, int i){
        if(network[i]!=-1)
            return;
        network[i]=c;
        for(int j=0;j<graph.length;j++){
            if(graph[i][j]==1 && i!=j)
                dfs(graph, c, j);
        }
    }
}